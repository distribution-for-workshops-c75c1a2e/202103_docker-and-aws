# 6. 今回もサブネット関連ですが，少し寄り道です．知らなくても支障はないやつです．
# クラスBやCのIPアドレスを使いたい，サブネットはもっと細かく切りたいといった状況に対応するため，
# VPCのCIDRをParametersとして外に出し，
# さらに，めんどくさいサブネット計算が少なくなるよう，!Cidr関数とSelect関数を利用します．
# ここでは，3つのサブネットをサブネットマスク/27のCIDRとして作成してみます．
# めんどくさいので今回はIGWやNACLの設定をしていません．
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Automatic calculation of CIDRs with subnet bits.
Resources:
  # VPC
  TestVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
      - Key: Name
        Value: TestVPC

  # Subnets
  TestSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ
      VpcId: !Ref TestVPC
      # !Select [0, list]の意味: リスト内のインデックス0番の要素を参照する (今回は!Cidr以下がリスト)．
      # !Cidr [!GetAtt TestVPC.CidrBlock, 3, 5]の意味:
      #    TestVPCのCidrBlockをベースに，サブネットビット"5" (=サブネットマスク"27")のCIDRブロックを3つ計算し，要素数3のリストとして返す．
      CidrBlock: !Select [0, !Cidr [!GetAtt TestVPC.CidrBlock, 3, 5]]
      Tags:
      - Key: Name
        Value: TestSubnet1
  TestSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ
      VpcId: !Ref TestVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt TestVPC.CidrBlock, 3, 5]]
      Tags:
      - Key: Name
        Value: TestSubnet2
  TestSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ
      VpcId: !Ref TestVPC
      CidrBlock: !Select [2, !Cidr [!GetAtt TestVPC.CidrBlock, 3, 5]]
      Tags:
      - Key: Name
        Value: TestSubnet3


Parameters:
  VpcCidr:
    Description: CIDR for VPC (ex. 10.0.0.0/16)
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3}\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AZ:
    Description: Availability Zone where subnets are provisioned.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
