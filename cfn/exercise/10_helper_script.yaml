# 10. ヘルパースクリプトを利用して，インスタンスの起動設定を記述します．
# CloudFormationには，EC2インスタンスの起動時設定の記述を容易にするためにヘルパースクリプトという機能があります．
# 起動時設定というと，UserDataにゴリゴリのシェルスクリプトを記述するという印象があるかもしれませんが，
# シェルスクリプトはその自由度ゆえ，"匠の逸品 (複雑すぎてメンテナンス性に欠ける)" となることがしばしば．
# そこで，ヘルパースクリプトを使うことで，できるだけ記述を簡略化します（その分，行数は増えることがほとんど）．
# また，ヘルパースクリプトによる起動設定にエラーがあるとスタック作成を失敗とできるため，エラーハンドリングもやりやすいです．
# その他のメリット等，ヘルパースクリプトに関する詳細はググってください．
# 今回は，インスタンスにdockerをインストールし，nginxコンテナ起動後，"You have finished launching a nginx container."という内容のファイルを作成します．
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create bootstrap actions of an EC2 instance with helper scripts and Metadata.
  Then, launch nginx container on the instance. Finally, You can access to a nginx web server via internet.
Metadata:
  # Interface (management console settings)
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VpcCidr
      - AZ
      - MyIp
    - Label:
        default: EC2 Instance Configuration
      Parameters:
      - LatestAMI
      - InstanceType
      - SSHKeyPair
      - Monitoring
      - Hibernation
    ParameterLabels:
      LatestAMI:
        default: Describe AMI namespace from SSM parameter store (not AMI ID; "ami-xxx").


Resources:
  # VPC & Subnet
  TestVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: True  # パブリックIPを持つインスタンスの名前解決に必要
      EnableDnsSupport: True    # パブリックIPを持つインスタンスの名前解決に必要
      Tags:
      - Key: Name
        Value: TestVPC
  TestIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: TestIGW
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestVPC
      InternetGatewayId: !Ref TestIGW
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ
      VpcId: !Ref TestVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt TestVPC.CidrBlock, 2, 8]]
      Tags:
      - Key: Name
        Value: PublicSubnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVPC
      Tags:
      - Key: Name
        Value: PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref TestIGW
      DestinationCidrBlock: 0.0.0.0/0
  PublicRTandSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # EC2 Instance
  TestInstance:
    Type: AWS::EC2::Instance
    DependsOn: PublicRTandSubnetAssociation
    CreationPolicy:
      ResourceSignal:  # 指定した時間（Timeout）内に指定回数（Count）以上の成功シグナルが，リソースからCFNに送信されない場合，インスタンス作成失敗とみなす．
        Count: 1
        Timeout: PT10M  # 10分
    Metadata:
      # cfn-init helper script setting
      AWS::CloudFormation::Init:
        configSets:
          TestConfigSet:  # "$ cfn-init -c TestConfigSet" でこのconfigSet内のconfigを順次実行します．
          - DockerProvision
          - NginxLaunch
        DockerProvision:  # dockerをインストールし，起動するconfigです．
          packages:
            yum:
              docker: []  # 空リストで最新バージョン (複数バージョンの指定可能)．
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - docker
        NginxLaunch:  # nginxコンテナを立ち上げるconfigです．
          commands:
            ContainerRun:
              command: docker run -dt -p 80:80 --name=nginx_container --hostname=nginx_host nginx:alpine
          files:
            /tmp/sample.txt:     # ファイルパーミッション'0644'のテキストファイルを作成
              content: "You have finished launching a nginx container.\n"
              mode: '000644'
              owner: 'root'
              group: 'root'
            /tmp/sample_symlnk:  # ファイルパーミッション'0644'のシンボリックリンクを作成
              content: /tmp/sample.txt
              mode: '120644'     # 前半の'120'がシンボリックリンクであることをを表しています．
    Properties:
      ImageId: !Ref LatestAMI
      InstanceType: !Ref InstanceType
      #SubnetId: !Ref PublicSubnet
      #SecurityGroupIds:
      #- !Ref TestSG
      KeyName: !Ref SSHKeyPair
      Monitoring: !Ref Monitoring
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: '0'
        GroupSet:
        - !Ref TestSG
        SubnetId: !Ref PublicSubnet
      #IamInstanceProfile: String
      #LaunchTemplate: String
      #SourceDestCheck: false
      HibernationOptions:
        Configured: !Ref Hibernation
      Tags:
      - Key: Name
        Value: TestInstance
      UserData:  # cfn-init で "Metadata属性 (TestConfigSet)" の内容を実行し， cfn-signal で cfn-init の成功可否を判断し， CFN に成功/エラーシグナルを送る．
        !Base64
          Fn::Sub: |
            #!/bin/bash
            # Install the files and packages from the metadata
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v \
                --stack ${AWS::StackName} \
                --resource TestInstance \
                --region ${AWS::Region} \
                --configsets TestConfigSet

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
                --stack ${AWS::StackName} \
                --resource TestInstance \
                --region ${AWS::Region} \
                #waitconditionhandle.url <- 待機条件ハンドル時は必須

  # SG
  TestSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: SG for TestInstance.
        GroupName: TestSG
        VpcId: !Ref TestVPC
        SecurityGroupIngress:
        - Description: Allow SSH access from specific IP.
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIp
        - Description: Allow HTTP access from specific IP.  # nginxの起動確認のため，#80 を開けます．（とりあえずMyIpのみ）
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIp
        SecurityGroupEgress:
        - Description: Allow HTTP access to Anywhere (IPv4).
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTP access to Anywhere (IPv6).
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - Description: Allow HTTPS access to Anywhere (IPv4).
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTPS access to Anywhere (IPv6).
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
        Tags:
        - Key: Name
          Value: Test-sg


Parameters:
  # NW Configuration
  VpcCidr:
    Description: CIDR for VPC (ex. 10.0.0.0/16)
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3}\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AZ:
    Description: Availability Zone where an instance is provisioned.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
  MyIp:
    Description: IPv4 CIDR range allowed to access to public subnet via SSH (ex. 54.168.32.139/32).
    Type: String
    AllowedPattern: (\d{1,3}\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  # EC2 Instance Configuration
  LatestAMI:
    Type : AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small, m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium, m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge, c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge, g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge, hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHKeyPair:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  Monitoring:
    Description: Specifies whether detailed monitoring is enabled (true) or not (false) for the instance.
    Type: String
    Default: false
    AllowedValues: [true, false]
  Hibernation:
    Description: Indicates whether an instance is enabled (true) or not (false) for hibernation.
    Type: String
    Default: false
    AllowedValues: [true, false]


Outputs:
  GlobalIpv4:
    Description: EC2 instances global ip address
    Value: ???
  URL:
    Description: EC2 instances endpoint (URL)
    Value: ???
